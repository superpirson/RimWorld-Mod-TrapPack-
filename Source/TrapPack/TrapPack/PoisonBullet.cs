// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
//using System.Threading.Tasks;
using UnityEngine;
using Verse.Sound;
using Verse;
using RimWorld;
namespace TrapPack
{
	public class PoisonBullet :Bullet
	{
		protected override void Impact (Thing hitThing)
		{
			//base.Impact (hitThing);
			if (hitThing != null)
			{
				// use puddle as our e-type
				if (hitThing is Pawn){
					
					Poisoning poisoning = ThingMaker.MakeThing(DefDatabase<ThingDef>.GetNamed("Poisoning")) as Poisoning;
					poisoning.potency = this.def.projectile.damageAmountBase;
					poisoning.SpawnSetup();
					poisoning.body_parts.Add((hitThing as Pawn).healthTracker.bodyModel.GetRandomNotMissingPart());
					Log.Message(poisoning.def.tickerType.ToString());
					poisoning.AttachTo (hitThing);
				}
			}
			else
			{
			
			}
			// MoteMaker.ThrowFlash (base.Position, "ShotFlash", 6f);
			MoteMaker.TryThrowMicroSparks (base.Position.ToVector3Shifted ());
			this.Destroy();
		}
	
	
	}
	
	
	// code taken from ty's fire code
	public class Poisoning : AttachableThing
	{
		private static DamageTypeDef poisoned_damage = (DamageTypeDef)DefDatabase<DamageTypeDef>.GetNamed("Poisoned");
		private static DamageTypeDef antidote_damage = (DamageTypeDef)DefDatabase<DamageTypeDef>.GetNamed("Antidote");
		public int potency;
		public List<BodyDefPart> body_parts = new List<BodyDefPart>();
		public int ticksSinceDamage = 0;
		public override string InfoStringAddon
		{
			get
			{
				return "Poisoned. Potency: " + this.potency.ToString();
			}
		}
		
		public override string Label
		{
			get
			{
				if (this.parent != null)
				{
					return "Poisening on: " +this.parent.Label;
				}
				return "Poisening";
			}
		}
		//
		// Methods
		//
		protected override void ApplyDamage (DamageInfo d)
		{
			if (d.Def ==antidote_damage)
			{
				this.potency -= d.Amount ;
				if (this.potency <= 0)
				{
					this.Destroy (DestroyMode.Vanish);
					return;
				}
			}
			}
		public override void Draw ()
		{
			Material parent_draw_mat = this.parent.DrawMat(this.parent.rotation);
			parent_draw_mat.color = Color.green;
			
		/*
			float num = this.fireSize / 1.2f;
			if (num > 1.2f)
			{
				num = 1.2f;
			}
			Vector3 s = new Vector3 (num, 1f, num);
			Matrix4x4 matrix = default(Matrix4x4);
			matrix.SetTRS (this.DrawPos, this.rotation.AsQuat, s);
			Graphics.DrawMesh (MeshPool.plane10, matrix, this.DrawMat (this.rotation), 0);
			*/
		}
		

		
		public override void ExposeData ()
		{
			base.ExposeData ();
			Scribe_Values.LookValue<int> (ref this.potency, "potency", 0,false);
			Scribe_Values.LookValue<int> (ref this.ticksSinceDamage, "ticksSinceDamage", 0,false);
			Scribe_Values.LookValue<List<BodyDefPart>> (ref this.body_parts, "body_parts", null,false);
		}
		public override void SpawnSetup ()
		{
			
			base.SpawnSetup ();
			}
		public override void Tick ()
		{
		//	Log.Message("ticked for poisen on " + this.parent.ToString());
			//this.sustainer.Maintain ();
			this.ticksSinceDamage++;
			if (this.ticksSinceDamage >= 1000 / this.potency)
			{
				if (this.parent == null)
				{
					Log.Warning("poisening's parent is null, destroying self");
					this.Destroy();
				}
				// do the actual damage to the pawn
				if (body_parts.Count > 0){
					(parent as Pawn).TakeDamage (new DamageInfo (poisoned_damage, 1, this, new BodyPartDamageInfo(body_parts.RandomElement(), false), this.def));
					this.TakeDamage(new DamageInfo(antidote_damage, 1, this));
					if (potency > 10){
						body_parts.Add(body_parts.RandomElement().parent);
					}
				}
				else{
					Log.Error ("poisening found no body parts to affect, pickeing one at random");
					body_parts.Add((parent as Pawn).healthTracker.bodyModel.GetRandomNotMissingPart());
				}
		
				this.ticksSinceDamage = 0;
			}
		}
	}
}

